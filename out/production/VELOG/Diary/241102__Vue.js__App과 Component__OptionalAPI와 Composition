#241102__Vue.js__App과 Component__OptionalAPI와 Composition

Vue.js 2에서 Vue.js 3으로 버전 업 되면서 핵심적인 업데이트가 있었다.

그 핵심은 바로 optionalAPI에서 Compositon으로의 변화

기존의 options API 구조라면

data{
  
},
method {
  
},
computed {
  
} 
의 구조를 가진다. 말 그대로 data, method, computed 라는 option들을 가지는 것이다.

이는 논리적 관련성성이 있는 코드들의 응집도를 낮추는 결과를 초래해 반객체지향적인 구조를 이루게 된다.

이에 반해 Composition API의 구조는 다음과 같다

<script>
setup(){
  const name = ref("myname")
  const changeName = () -> {
    name.value = "newName"
  }
  return {
    name, changeName
  }
}
</script>

이와 같이 논리적으로 연관성이 높은 코드들을 한 곳에 모아둘 수 있어 
코드를 추출하여 컴포넌트화 시키거나 유지보수의 관점에서 획기적인 장점들을 가지게 된다.

# 간단한 directive method 정리
1. v-bind:[변수명]="[javascript 변수명]"
ex) <p v-bind:title="newTitle" v-text="newMessage">newMessage의 내용에 따라 출력되는 값이 달라진다.</p>
    <button v-on:click="changeNewTitle">changeNewTitle</button>
    <button @click="changeNewMessage">changeNewMessage</button>

<script>
setup(){
  const newTitle = ref("newTitle")
  const changeNewTitle = () => {
    newTitle.value = "newerTitle"
  }
  const newMessage = ref("newMessage")
  const changeNewMessage = () => {
    newMessage.value = "newerMessage"
  }
  return {
    newTitle, changeNewTitle, newMessage, changeNewMessage 
  }
}
</script>

이상 끝
