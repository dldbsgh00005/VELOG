# 241101__SpringSeurity__Join__Login

Join__without csrf_token

Spring Security 는 기본적으로 csrf token을 제공한다.

thymeleaf를 사용중이라면 <meta th:name="${_csrf}" th_content="${_csrf.token}" ></meta> 에서 csrf_token을 받아올 수 있다.

form태그라면 <input type="hidden" th:name="${_csrf_token}" th=value="${_csrf.token}" >을 form tag 안에 넣어주어 post 요청시 같이 전달하면 된다.

이번 구현에는 SecurityConfig.class 파일의 @Bean으로 등록된 SecurityFitlerChain을 반환하는 securityFilterChain 메소드에서

http.csrf((csrf)->csrf.disable()) 설정을 통해 csrf 설정을 비활성화 해주고 진행했다.

# Join Logic 

1. join.html 에서 form 태그에서 UserDto의 필드값에 맞추어 username, password, password2를 전송.
2. JoinController에서 PostMapping("/join") 에서 @modelAttribute UserDto userDto로 받아준다.
3. joinService.save(userDto) 메소드를 통해 JoinService.class 파일에 구현된 joinRepository.save(userEntity) 메소드를 실행하여 회원가입을 완료한다.

# Login Logic

1. login.html 에서 form 태그에서 UserDto의 필드값에 맞추어 username, password, password2를 전송 ( 편의를 위해 JoinRequestDto와 LoginRequestDto를 별도로 구성하지 않고 UserDto 하나로 구성하였다. )
2. SecurityConfig의 securityFilterChain에서 http.formLogin((formLogin)->formLogin.loginPage("/login")
                                                                                  .loginProcessUrl("/loginProcess")
                                                                                  .defaultSuccessUrl("/")
                                                                                  .defaultFailureUrl("/login"));

구현을 통해 자동으로 loginProcess url에서 SpringSecurity 내부적으로 로그인 처리를 해주도록 하였다.
로그인 성공시 자동으로 root url(localhost:8080)으로 redirect 되도록 설정하였다. (forward와 redirect의 개념에 대한 이해 필수!)
로그인 실패시 자동으로 /login으로 redirect 해주도록 설정하였다.

Spring Security에서는 AuthenticationFilter과 UsernamePasswordAuthenticationToken, AuthenticationManager, AuthenticationProvider 등을 내부적으로 자동으로 처리해주기 때문에

개발자는 UserDetailsService와 UserDetails만을 implement 받아 내부 메소드를 구현해주면 로그인 로직 구현이 된다.

UserDetailsService와 UserDetails의 구현은 다음과 같다. ( 이전에 작성한 UserDetailService와 UserDetails의 구현과 동일하다. 여기서는 연습삼아 재작성 하도록 하겠다. )

@Service
public class CustomUserDetailsService implements UserDetailsService{

      @Autowired   
      private UserRepository userRepository;  // 생성자 주입 방식 및 final을 달아주는 것이 불변성, 보안을 위해 유리하다. 여기서는 편의를 위해 @Autowired annotation으로 구현하도록 하겠다.

  @Override
  public UserDetails loadByUsername(String username) throws UsernameNotFoundException{
  
    UserEntity userEntity = userRepository.findByUserName(username);   // userRepository에서 findByUsername을 직접 구현하였다.  // Jpa Method 작성 방법에 대해 이해가 필요하다.

    if(userEntity == null){
        throw new UsernameNotFoundException
    }

    return new CustomUserDetails(userEntity); 
  }
} 

public class CustomUserDetails implements UserDetails {

  private UserEntity userEntity;

  @Override
  public Collection<? extends GrantedAuthority> getAuthorities(){

    Collection collection = new ArrayList<>();

    collection.add(new GrantedAuthority){

      @Override
      public String getAuthority(){
          return userEntity.getRole();
      }
    }
  }

  @Override
  public String getPassword(){
      return userEntity.getPassword();
  }

  @Override
  public String getUsername(){
      return userEntity.getUsername();
  }

  ... isAccountNonExpired(), isAccountNonLocked(), isCredentialsNonExpried(), isEnabled() 메소드 생략
}

마지막으로 UserRepository를 간단하게 구현해주도록 하겠다.

@Repository
public interface UserRepository extends JpaRepository<UserEntity, Long> {

  public UserEntity findByUsername(String username);
}

