@RestControllerAdvice, @ExceptionHandler

1. 예외를 선언한다.
2. GlobalExceptionHandler 클래스를 만들어 @RestControllerAdvice를 작성한다.
3. ExceptionHandler 메소드를 만들어 @ExceptionHandler를 작성, 매개변수로 예외 클래스를 작성
4. ExceptionBody 클래스를 작성, 필드로 code, message를 작성 후 @AllAragsConstructor 작성, (Json 직렬화 시 Getter가 필요하므로 @Getter를 작성하거나 필드에 @JsonProperty 혹은 클래스 위에 @JsonAutoDetect 작성)

# 예시 코드

📌 예외 클래스
public class UsernameAlreadyExistException extends RuntimeException {

    public UsernameAlreadyExistException(){
        super("Username Already Exist");
    }
}

📌 예외 핸들러 클래스
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    /** User **/

    ///  handleUsernameAlreadyExistException
    @ExceptionHandler(UsernameAlreadyExistException.class)
    public ResponseEntity<?> handleUsernameAlreadyExistException(UsernameAlreadyExistException ex){

        HttpStatus status = HttpStatus.BAD_REQUEST;

        String code = "BAD_REQUEST";
        String message = ex.getMessage();

        return ResponseEntity.status(status).body(new ExceptionBody(code, message));
    }
}

📌  예외에 보낼 바디

@AllArgsConstructor
@Getter // JsonProperty로 인식하도록 하였음
public class ExceptionBody {

    @JsonProperty
    private String code;

    @JsonProperty
    private String message;

}

