package File.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
public class FileController {
	
	// 파일을 1개 업로드
	@PostMapping("/file")
	public ResponseEntity<?> file(@RequestParam("file") MultipartFile[] files) throws IOException { // multipartfile[] 로 변경시 복수개의 파일 업로드
		
		List<Map<String, Object>> fileList = new ArrayList<>();
		
		for(MultipartFile file : files) {
			log.info("getOriginalFilename : " + file.getOriginalFilename());
			
			UUID uuid = UUID.randomUUID();
			
			String originalName = file.getOriginalFilename();
			
			String saveFilename = uuid + originalName;
			
			String url = "C:\\Users\\dldbs\\Pictures\\FileUpload";
			
			File saveFile = new File(url, saveFilename); 
			
			file.transferTo(saveFile);
			
			log.info(file.getContentType());
			
			Map<String, Object> m = new HashMap<>();
			m.put("originalFileName", file.getOriginalFilename());
			m.put("path", saveFile);
			m.put("size", file.getSize());
			
			fileList.add(m);
		}
		
		for(Map<String, Object> m : fileList) {
			System.out.println(m.get("originalFileName"));
			System.out.println(m.get("path"));
			System.out.println(m.get("size"));
		}
		
		return new ResponseEntity<String>("file uploaded", HttpStatus.CREATED);
	}

	@PostMapping("/send-file")
	public ResponseEntity<?> sendFile(@RequestParam("file") MultipartFile file ){
		
		RestTemplate restTemplate = new RestTemplate();
			
		String targetUrl = "http://localhost:8080/receive-file";
		
		List<String> responses = new ArrayList<>();
		
		// 헤더 생성
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.MULTIPART_FORM_DATA);
		
		// 파일 데이터를 포함한 MultiValueMap 생성
		MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
		body.add("file", file.getResource());
		
		// 요청 생성
		HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
		
		// 요청 전송
		ResponseEntity<String> response = restTemplate.exchange(targetUrl, HttpMethod.POST, requestEntity, String.class);
		responses.add(response.getBody());
		
		return new ResponseEntity<String>("file sent", HttpStatus.OK);
	}
	@Autowired
	private FileService fileService;
	
	@PostMapping("receive-file")
	public ResponseEntity<?> receiveFile(@RequestParam("file") MultipartFile file ) {
		
		log.info(file.getOriginalFilename());
		log.info("file received");
		
		fileService.saveFile(file);

    return new ResponseEntity<String>("file received", HttpStatus.OK);
	}
	
}

@Service
@Slf4j
class FileService {
	
	@Autowired
	private FileRepository fileRepository;
	
	public Boolean saveFile(MultipartFile file) {
		
		FileEntity fileEntity = new FileEntity();
		fileEntity.setId(1L);
		fileEntity.setFileName(file.getOriginalFilename());
		
		fileRepository.save(fileEntity);
		
		log.info("file saved");
		
		return true;
	}
}

@Repository
interface FileRepository extends JpaRepository<FileEntity, Long> {}

@Entity @Getter @Setter
class FileEntity{

@Id
	private Long id;
	
	@Column
	private String fileName;
}

