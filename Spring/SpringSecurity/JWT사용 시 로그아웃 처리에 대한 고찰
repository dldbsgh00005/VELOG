# 고민의 과정 1

/**
 *   Redis에 Refresh Token을 저장하는 방식과 로그아웃에서 맞닥뜨린 문제점에 대한 고찰
 *  - 로그인시 Redis에 userid : refresh token 형태로 저장 (다중 로그인 관리를 위해 userid : List<refreshToken> 형태 관리도 염두에 두고 있음, 이대로 되면 관리가 편할듯)
 *  >> 로그아웃 시 유저 userid를 얻어야 하는 비효율적인 로직 발생
 *  
 *  # 해결책 1
 *  1. 로그인 시 SecurityContextHolderRepository에 유저 정보 저장
 *  2. 로그아웃 시 SecurityContextPersistenceFilter에서 유저 정보 획득
 *  3. CustomLogoutFilter에서 위의 정보를 활용하여 Redis에 저장된 refresh token 삭제
 *  >> SecurityContextHolderRepository에서 유저 정보를 저장해야 하는 부담이 발생, 하지만 다중 로그인을 로그아웃 시키는데 강점이 있을 것으로 판단
 *
 *  # 해결책 2
 *  1. 로그인 시 Redis에 refresh token : ? 값 형태로 저장
 *  2. 로그아웃 시 쿠키에서 refresh token 획득하여 Redis에 접근 및 삭제
 *  >> 위 경우 다중 로그인 처리는 어떻게??
 *
 *  # 해결책 3
 *  ...
 *  
 *
 *
 * **/

# 고민의 과정 2 및 주관적인 해결 방안

### 다중 로그인에 대한 처리 (지금은 쓰지 않지만 기술적인 학습 필요)
1. 모두 로그아웃 (Redis에 userid : List<refreshToken> 형태로 관리하여 로그아웃 시 무조건 전부 삭제)
2. 개별 로그아웃 ( Redis에 userid : List<refreshToken> 형태로 관리하여 get,set 메소드 활용 )

### 다중 로그인을 방지 (서비스의 성격에 따라) 
1. 유저의 상태를 관리 (ON/OFF)
2. 중복 로그인 시 차단 (로그인 시 Redis에 접근해 로그인 여부를 검증)
