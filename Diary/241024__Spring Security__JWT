# 241024 Spring Security, JWT

# Spring Security의 구조 

WAS -> 필터 필터 [DelegatingFilterProxy] 필터 필터
                        |
                        -------------------------> Spring Container -> FilterProxy (SecurityFilterChain(Filters : ex) UsernamePasswordAuthenticationFilter, CacheAwareFilter, etc... ))
WAS의 필터에 DelegatingFilterProxy가 추가된다. 요청이 들어오면 WAS의 일부 필터를 거친 후 DelegatingFilterProxy가 중간에 intercept하여 FilterChainProxy에게 요청을 보낸다. 
FilterChainProxy는 요청을 받은 URL에 해당하는 SecurityFilterChain에게 요청한다. ( 이 때 알 수 있는 사실은 SecurityFiterChain이 0~N개 수 있다는 것이다.)
따로 등록한 SecurityFilterChain이 없다면 DefaultFilterChain이 실행된다. 
단, INDEX의 개념이 있어 먼저 등록한 순서대로 실행된다.
그러므로 @Order([number])으로 인덱스를 지정해주거나 

http.requestMathcer((auth) -> auth.requestMatcher("[URL]")); 을 통해 요청을 받을 URL을 지정해주어야 한다. (미지정시 모든 요청을 받게되어 원치않은 결과를 초래할 수 있음.)

각 SecurityFilterChain의 필터를 지정해줄 수 있다. ex: http.csrf((csrf) -> csrf.Customers.withDefaults); or http.csrf((csrf) -> csrf.disabled());

SecurityFilterCustomizer을 반환하는 함수를 만들어 ignoring할 URL을 지정해줄 수 있다.
ex : http.web((web) -> web.ignoring().requestMatcher("/img/**"));

# JWT 개념

[Header.Payload.Signature]

Header = {
  "alg" : "HS256",
  "type" : "JWT"
}

Payload = {
"content" : "content"
}

Signature = "[signature]" >> Signature은 Header와 Payload 그리고 secert key를 매개변수로 해 반환된다. 
그러므로 누군가 인위적으로 Header나 Payload를 변경하게 되면 서명 부분인 Signature이 변경되어 위/변조를 확인할 수 있다.

JWT는 SWT,SMAL보다 선호된다. 이유는 짧아서! 
HTTP기반으로 보내게 되면 8KB 이내에서만 전송할 수 있어 content가 길어지게 되면 전송에 오류가 날 수 있다.

