# 241022 Spring Security__JWT__SESSION_COOKIE

# Spring Security

Spring Security는 인증,인가를 담당하는 framework이다.
기본적으로 session,cookie방식으로 인증하지만 JWT 방식과 동시에 사용할 수 있다. 이 경우 http.csrf((csrf) -> csrf.diabled())로 기존의 csrf 방어를 종료시킬 수 있다.

기본 csrf token을 제공하며 meta태그의 content에 csrf token을 받아올 수 있다.

세션 관리는 SessionManagementFilter에서 담당한다.
SecurityConfig의 HttpSecurity를 매개변수로, SecurityFilterChain을 리턴하는 filterChain 함수에서
Session Fixation Protection이 가능하다. 
방법은 총 3가지가 있다. createNewSessionId(세션은 똑같지만 sessionId만 변경), newSession(기존의 속성들을 버리고 새로운 세션을 생성), migrateSession(기존의 속성들을 가지고 새 세션을 생성)


# JWT
기존 Spring Security에서는 경로별 인가작업만을 진행하고 인증작업은 JWT로 진행하면 어떨까 하는 생각을 했었다.
이유로는 일단 Spring Security가 메이저 버전별로 deprecated되는 메소드들이 너무나도 많고 그에 따라 참고할 수 있는 자료가 제한된다는 생각이 들었기 때문이다. 툭하면 adaptor시절의 시큐리티 2.x.x 버전의 레퍼런스들이 보였기 때문

그래서 JWT? JSON WEB TOKEN이면 버전별로 큰 차이도(아예) 없지 않을까? 라는 생각을 가지게 되었다. 그러나 실제로 알아본 결과 JWT도 버전별로 0.15버전과 0.21버전의 차이가 크고 Deprecated도 많이 됐다는 것을 알게 되고
방향성을 찾기 위해 고민중에 있다.

JWT는 SESSION에 COOKIE로 저장하나? 하는 생각을 가졌는데 아니었다!!!

# SESSION

HttpServletRequest를 import하여 session에서 원하는 key의 cookie를 가져올 수 있다.
HttpServletResponse.addCookie()를 통해 cookie를 session에 전달할 수 있다.
Cookie() cookie = new Cookie();를 통해 쿠키 생성

# Cookie 

쿠키는 생각보다 별게 없었다. 

HttpServletResponse.addCookie([COOKIE]); 그리고
HttpServletRequest.[가져오는 메소드]('[KEY]'); 를 통해 가져오는 것 
이 두가지 말고는 특별한 점을 발견하지 못했다. 

예전에 Django 교육 받을 시 학습했던 cookie의 보안 규칙 4가지를 끝으로 오늘의 VELOG를 마무리하겠다.
1. 중요하지 않은 데이터만 
2. (기억이 안난다)
3. 시간 제한
4. 도메인 제한

오늘의 VELOG는 큰 수확은 없었던 것 같다.. 좀 더 분발하자.


