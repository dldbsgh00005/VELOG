# 241022 Spring Security__JWT__SESSION_COOKIE

# Spring Security

Spring Security는 인증,인가를 담당하는 framework이다.
기본적으로 session,cookie방식으로 인증하지만 JWT 방식과 동시에 사용할 수 있다. 이 경우 http.csrf((csrf) -> csrf.diabled())로 기존의 csrf 방어를 종료시킬 수 있다.

기본 csrf token을 제공하며 meta태그의 content에 csrf token을 받아올 수 있다.

세션 관리는 SessionManagementFilter에서 담당한다.
SecurityConfig의 HttpSecurity를 매개변수로, SecurityFilterChain을 리턴하는 filterChain 함수에서
Session Fixation Protection이 가능하다. 
방법은 총 3가지가 있다. createNewSessionId(세션은 똑같지만 sessionId만 변경), newSession(기존의 속성들을 버리고 새로운 세션을 생성), migrateSession(기존의 속성들을 가지고 새 세션을 생성)

Session Fixation Protection을 위해 한 가지 더 고민해본 것이 있다.
바로 maximumSession()의 매개변수로 1을 주는 것인데.

Session Fixation Attack의 경우 과정을 살펴보면
attacker가 Valid SessionId 얻는다. -> 일반 유저에게 attacker의 sessionId를 전달한다. -> 일반 유저가 attacker의 sessionid로 로그인 그리고 sessionid가 유효해짐 -> attacker는 같은 sessionId로 권한을 얻고 활동한다.
인데, 일반 유저가 먼저 로그인을 하게 되고 그에 따라 valid sessionid의 우선권은 일반 유저에게 돌아간다. 그에 따라 자연스럽게 attacker의 session은 무효화.

maximumSession은 직접적으로 session Fixation을 위해 만들어진 것은 아니나, indirectly, 간접적으로 session fixation protection의 효과를 가질 수는 있어보인다.
하지만 newSession()을 쓴다면 굳이 maximumSession을 쓸 필요는 없어보인다. 
혹시 서버의 자원을 한정적으로 사용하게 하고싶다면 겸사겸사 쓸만할지도?

# PROXY의 실사용 유무에 대한 고찰
간략하게 적어보겠다.
내가 이해한 proxy의 주요 기능은 다음 3가지와 같다. 
1. tracking
2. load balancer
3. hide address ( reverse proxy의 경우에만 해당! forward proxy는 해당되지 않음)

하지만 생각을 해본 결과 
1. 서버의 규모가 작다면 tracking이 큰 의미가 있을까 ( log만 잘 찍어도 되지 않을까)
2. 서버가 분산되어있지 않다면 ( scale out 생각도 없다면 ) load balancer는 의미가 없다.
3. 어차피 spring security, aws, jwt, https 등으로 보안을 2,3,4중으로 둘러칠텐데 주소를 은닉하는게 유의미한 차이를 보일까

이를 통해 proxy 적용에 대해 고민을 하게 되었다. 끝

# JWT
기존 Spring Security에서는 경로별 인가작업만을 진행하고 인증작업은 JWT로 진행하면 어떨까 하는 생각을 했었다.
이유로는 일단 Spring Security가 메이저 버전별로 deprecated되는 메소드들이 너무나도 많고 그에 따라 참고할 수 있는 자료가 제한된다는 생각이 들었기 때문이다. 툭하면 adaptor시절의 시큐리티 2.x.x 버전의 레퍼런스들이 보였기 때문

그래서 JWT? JSON WEB TOKEN이면 버전별로 큰 차이도(아예) 없지 않을까? 라는 생각을 가지게 되었다. 그러나 실제로 알아본 결과 JWT도 버전별로 0.15버전과 0.21버전의 차이가 크고 Deprecated도 많이 됐다는 것을 알게 되고
방향성을 찾기 위해 고민중에 있다.

JWT는 SESSION에 COOKIE로 저장하나? 하는 생각을 가졌는데 아니었다!!!

# SESSION

HttpServletRequest를 import하여 session에서 원하는 key의 cookie를 가져올 수 있다.
HttpServletResponse.addCookie()를 통해 cookie를 session에 전달할 수 있다.
Cookie() cookie = new Cookie();를 통해 쿠키 생성

# Cookie 

쿠키는 생각보다 별게 없었다. 

HttpServletResponse.addCookie([COOKIE]); 그리고
HttpServletRequest.[가져오는 메소드]('[KEY]'); 를 통해 가져오는 것 
이 두가지 말고는 특별한 점을 발견하지 못했다. 

예전에 Django 교육 받을 시 학습했던 cookie의 보안 규칙 4가지를 끝으로 오늘의 VELOG를 마무리하겠다.
1. 중요하지 않은 데이터만 
2. (기억이 안난다)
3. 시간 제한
4. 도메인 제한

오늘의 VELOG는 큰 수확은 없었던 것 같다.. 좀 더 분발하자.


