- 싱글 스레드 : 데이터의 일관성 보장

- 인메모리 방식 : CPU와 가까워 속도가 빠르다.

/ 캐시로 사용 ( 자주 접근하는 데이터 ) 

/ HHD,SSD 기준 100 배 ~ 40 배 이상 빠름

- 다양한 자료구조 지원 : List, Hash 등



# 기본 명령어

- SET [KEY] [VALUE]   /  단수개 저장

- MSET / 복수개 저장

- SET [KEY:KEY1:KEY2] [VALUE] / 계층 구조 저장





# Strings - 경매 분산락 

- SETNX [KEY] [VALUE] / 기존 키가 존재 하지 않을 경우에만 동작

- Rate Limiting(fixed-window) / 특정 시간에 특정 수의 요청을 제한 (ERROR-CODE : 429)



# Lists

- LPUSH, LPOP, RPUSH, RPOP, 

- LRANGE [KEY] INDEX1, INDEX2 ...

- TTL

중복 허용 O 

O(1) 수정, 삭제



# Sets

- SADD, SREM, SISMEMBER, SMIXMEMBER, SINTER, SDIFF, SUNION



- 중복 허용 X

- TTL 기능

- 빠른 연산 및 집합 연산 가능



# Sorted Sets(ZSET)

- 자동 정렬 

- ZINCRBY [KEY] [NUM] [VALUE]

- 가중치 부여 되어 자동 정렬

- 점수를 통해 실시간 랭킹 관리

- 자동 정렬 > 빠른 랭킹 조회

- Sliding Window



- Fixed-Window (특정 주기 직전/후 요청시 tricky)

- Sliding Window (특정 시간 기준 - 주기 )



# Hashes

SET [KEY:KEY1] []

- 다양한 필드를 하나의 키로 관리 (계층 구조)

- 필드별 업데이트 및 빠른 조회



# Bitmap 

- SETBIT [KEY:KEY1:KEY2] [VALUE]

- 메모리 절약 (String 대비 40여 배 )

- 빠른 조회 성능 

- 중복사용 방지



# 좋은 사용처

- 임시 데이터 저장

- 빠른 읽기/쓰기 

- 가변적 데이터 구조



# 안좋은 사용처

- 데이터 일관성, 영속성 중요

- 대용량 정적 데이터 저장 ( 인메모리 )

- 복잡한 관계형 쿼리 필요



# 주의할 점

- 싱글 스레드 ( 명령 처리 시간이 길면 위험 / 처리 시간이 O(N) 이면 주의 /

모든 키를 검사하므로 / KEYS 대신 SCAN 명령어 사용 / 조건 지정 가능)



- Look-Aside (Cache Hit / Cache Miss)

- Thundering-Herd (Cache Miss 지속적 발생 / DB에 중복된 요청 발생 & 과부하 / 서버 )

- Cache 있을 때 : TTL 확인 후 갱신

- Cache 없을 때 : 키가 없을 때 들어온 첫 요청 이후 모든 요청을 잠금 , DB 조회 후 Cache 저장 후 잠금 해제



- 영속성이 필요한 데이터는 메인 DB와 잘 조합하자



